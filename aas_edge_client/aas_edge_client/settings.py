"""
Django settings for aas_edge_client project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-52w4@$poiwhby&pca=06j@)wyf6jznffognu(mo$b6gtmp!rz5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'aas_edge_client',
    'api.NetworkConfiguration',
    'api.SystemInformation',
    'periodic_task',
]

import os


LOGGING_DIR = os.path.join(BASE_DIR, 'logging')
if not os.path.exists(LOGGING_DIR):
    os.makedirs(LOGGING_DIR)

accessLog = os.path.join(LOGGING_DIR, 'django_access.log')
errorLog = os.path.join(LOGGING_DIR, 'django_error.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file_access': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': accessLog,
            'formatter': 'verbose',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': errorLog,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': { #<- logger name
            'handlers': ['file_access', 'file_error'],
            'level': 'INFO', #capture all level above INFO
            'propagate': True,
        },
    },
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aas_edge_client.urls'

STATIC_URL = '/static/'



STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'aas_edge_client.context_processor.vendor_details'
            ],
        },
    },
    
]

WSGI_APPLICATION = 'aas_edge_client.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AAS_ID_SHORT = 'Murrelektronik_V000_CTXQ0_0100001_AAS'

# SERVER_URL = 'http://localhost:51000'

# CLIENT_URL = 'http://localhost:8000'

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Default Redis port is 6379
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # If you want to store task results
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

from celery.schedules import crontab
from datetime import timedelta

CELERY_BEAT_SCHEDULE = {
    # 'aasx_server_polling': {
    #     'task': 'periodic_task.tasks.aasx_server_polling',
    #     'schedule': timedelta(seconds=10),  # Schedule the task to run every minute
    # },
    'aasx_client_polling': {
        'task': 'periodic_task.tasks.aasx_client_polling',
        'schedule': timedelta(seconds=5),  # Schedule the task to run every minute
    },
}


import os

AAS_ID_SHORT = os.environ.get('AAS_ID_SHORT', 'Murrelektronik_V000_CTXQ0_0100001_AAS')
# AAS_ID_SHORT = os.environ.get('AAS_ID_SHORT', '')
SERVER_URL = os.environ.get('SERVER_URL', 'http://0.0.0.0:51000')
#SERVER_URL = os.environ.get('SERVER_URL', 'https://ca-lni-aaxserver-dev-002.gentlerock-dced5219.northeurope.azurecontainerapps.io')
CLIENT_URL = os.environ.get('CLIENT_URL', 'http://0.0.0.0:18000')

CLIENT_POLLING_INTERVAL = int(os.environ.get('CLIENT_POLLING_INTERVAL', 5))
SERVER_POLLING_INTERVAL = int(os.environ.get('SERVER_POLLING_INTERVAL', 10))

INTERFACES_DEFAULT_FILE_PATH = os.environ.get('INTERFACES_DEFAULT_FILE_PATH', BASE_DIR / 'default_config/interfaces.json')

VENDOR_NAME = os.environ.get('VENDOR_NAME', 'VendorName')
VENDOR_LINK = os.environ.get('VENDOR_LINK', '')

PRIMARY_COLOR = os.environ.get('PRIMARY_COLOR', '#55B410')
SECONDARY_COLOR = os.environ.get('SECONDARY_COLOR', '#164C0C')

TEXT_COLOR = os.environ.get('TEXT_COLOR', '#FFFFFF')
BUTTON_COLOR = os.environ.get('BUTTON_COLOR', '#55B410')    

